/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _style = __webpack_require__(1);
	
	var _style2 = _interopRequireDefault(_style);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var CHF = [],
	    EUR = [],
	    USD = [];
	
	function getCurrency() {
	  fetch('./json/currency.json').then(function (response) {
	    if (response.status !== 200) {
	      console.log('Looks like there was a problem. Status Code:  \n          ' + response.status);
	    }
	    response.json().then(function (data) {
	      createArr(data);
	    });
	  }).catch(function (err) {
	    console.log('Fetch Error :-S', err);
	  });
	}
	
	getCurrency();
	
	/*creating arrays with currencies*/
	function createArr(data) {
	  data.map(function (arr) {
	    if (arr[0]) {
	      if (arr[0]['CHF']) {
	        CHF.push(arr[0]['CHF']);
	      } else if (arr[0]['USD']) {
	        USD.push(arr[0]['USD']);
	      } else if (arr[0]['EUR']) {
	        EUR.push(arr[0]['EUR']);
	      }
	    }
	    if (arr[1]) {
	      if (arr[1]['CHF']) {
	        CHF.push(arr[1]['CHF']);
	      } else if (arr[1]['USD']) {
	        USD.push(arr[1]['USD']);
	      } else if (arr[1]['EUR']) {
	        EUR.push(arr[1]['EUR']);
	      }
	    }
	    if (arr[2]) {
	      if (arr[2]['CHF']) {
	        CHF.push(arr[2]['CHF']);
	      } else if (arr[2]['USD']) {
	        USD.push(arr[2]['USD']);
	      } else if (arr[2]['EUR']) {
	        EUR.push(arr[2]['EUR']);
	      }
	    }
	  });
	
	  /*creating arrays only with rates*/
	  var ratesCHF = CHF.map(function (date) {
	    return date.rate;
	  });
	
	  var ratesUSD = USD.map(function (date) {
	    return date.rate;
	  });
	
	  var ratesEUR = EUR.map(function (date) {
	    return date.rate;
	  });
	
	  /*calc min/max for currencies*/
	  var minRateCHF = Math.min.apply(Math, _toConsumableArray(ratesCHF));
	  var maxRateCHF = Math.max.apply(Math, _toConsumableArray(ratesCHF));
	
	  var minRateEUR = Math.min.apply(Math, _toConsumableArray(ratesEUR));
	  var maxRateEUR = Math.max.apply(Math, _toConsumableArray(ratesEUR));
	
	  var minRateUSD = Math.min.apply(Math, _toConsumableArray(ratesUSD));
	  var maxRateUSD = Math.max.apply(Math, _toConsumableArray(ratesUSD));
	
	  /*calc average*/
	  var average = function average(arr) {
	    return arr.reduce(function (p, c) {
	      return p + c;
	    }, 0) / arr.length;
	  };
	
	  var avUSD = average([].concat(_toConsumableArray(ratesUSD)));
	  var avEUR = average([].concat(_toConsumableArray(ratesEUR)));
	  var avCHF = average([].concat(_toConsumableArray(ratesCHF)));
	
	  /*find date*/
	  var findDayRate = function findDayRate(arr, rate) {
	    var result = [];
	    for (var i = 0; i < arr.length - 1; i++) {
	      if (arr[i]['rate'] === rate) result.push(arr[i]['exchangedate']);
	    }
	    return result;
	  };
	
	  var datesMinEUR = findDayRate(EUR, minRateEUR);
	  var datesMinUSD = findDayRate(USD, minRateUSD);
	  var datesMinCHF = findDayRate(CHF, minRateCHF);
	
	  var datesMaxEUR = findDayRate(EUR, maxRateEUR);
	  var datesMaxUSD = findDayRate(USD, maxRateUSD);
	  var datesMaxCHF = findDayRate(CHF, maxRateCHF);
	
	  /* Find dates when exchange rate was within 5% on the average exchange rate */
	  var findDaysWithinAv5 = function findDaysWithinAv5(arr, averageVal) {
	    var min = averageVal - averageVal * 2.5 / 100;
	    var max = averageVal + averageVal * 2.5 / 100;
	    var result = [];
	    for (var i = 0; i < arr.length - 1; i++) {
	      var currentRate = arr[i]['rate'];
	      if (max > currentRate && currentRate > min) result.push(arr[i]['exchangedate']);
	    }
	    return result.length;
	  };
	
	  var datesAvUSD = findDaysWithinAv5(USD, avUSD),
	      datesAvEUR = findDaysWithinAv5(EUR, avEUR),
	      datesAvCHF = findDaysWithinAv5(CHF, avCHF);
	
	  /* Calc correlation from 1999-01-01 until today */
	  /* Between USD/EUR */
	
	  var calcCorrelation = function calcCorrelation(arr1, arr2, averageVal1, averageVal2) {
	    var correletion = void 0;
	    var sum1 = 0,
	        sum2 = 0,
	        sum3 = 0;
	    var arrLength = arr1.length > arr2.length ? arr2.length - 1 : arr1.length - 1;
	    for (var i = 0; i < arrLength; i++) {
	      var a = arr1[i]['rate'] - averageVal1;
	      var b = arr2[i]['rate'] - averageVal2;
	      sum1 += a * b;
	      sum2 += Math.pow(a, 2);
	      sum3 += Math.pow(b, 2);
	    }
	    return sum1 / Math.sqrt(sum2 * sum3);
	  };
	
	  var corrUsdEur = calcCorrelation(USD, EUR, avUSD, avEUR).toFixed(4);
	
	  /* Between CHF/EUR */
	  var corrChfEur = calcCorrelation(CHF, EUR, avCHF, avEUR).toFixed(4);
	
	  /**
	  ***
	  *** Display data
	  ***
	  **/
	
	  /*min/max*/
	  document.querySelector('#min-chf').innerHTML = minRateCHF.toFixed(2);
	  document.querySelector('#max-chf').innerHTML = maxRateCHF.toFixed(2);
	
	  document.querySelector('#min-eur').innerHTML = minRateEUR.toFixed(2);
	  document.querySelector('#max-eur').innerHTML = maxRateEUR.toFixed(2);
	
	  document.querySelector('#min-usd').innerHTML = minRateUSD.toFixed(2);
	  document.querySelector('#max-usd').innerHTML = maxRateUSD.toFixed(2);
	
	  /*average*/
	  document.querySelector('#average-usd').innerHTML = avUSD.toFixed(2);
	  document.querySelector('#average-eur').innerHTML = avEUR.toFixed(2);
	  document.querySelector('#average-chf').innerHTML = avCHF.toFixed(2);
	
	  /*When dates occur*/
	  function showDates(arrDates, currency, value) {
	    if (arrDates.length > 1) {
	      var selectedField = document.querySelector('#' + value + '-date-' + currency);
	      var elSelect = document.createElement('select');
	      selectedField.appendChild(elSelect);
	      for (var i = 0; i < arrDates.length; i++) {
	        var elOption = document.createElement('option');
	        elOption.innerHTML = arrDates[i];
	        elSelect.appendChild(elOption);
	      }
	    } else {
	      document.querySelector('#' + value + '-date-' + currency).innerHTML = arrDates;
	    }
	  }
	
	  showDates(datesMinEUR, 'EUR', 'min');
	  showDates(datesMinUSD, 'USD', 'min');
	  showDates(datesMinCHF, 'CHF', 'min');
	
	  showDates(datesMaxEUR, 'EUR', 'max');
	  showDates(datesMaxUSD, 'USD', 'max');
	  showDates(datesMaxCHF, 'CHF', 'max');
	
	  /* Dates whithin average */
	  document.querySelector('#dates-av-USD').innerHTML = datesAvUSD;
	  document.querySelector('#dates-av-EUR').innerHTML = datesAvEUR;
	  document.querySelector('#dates-av-CHF').innerHTML = datesAvCHF;
	
	  /* Correlation */
	  document.querySelector('#corr-usd-eur').innerHTML = corrUsdEur;
	  document.querySelector('#corr-chf-eur').innerHTML = corrChfEur;
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgODg4MzQ2NjllM2Y5Yjg5MDJjMjciLCJ3ZWJwYWNrOi8vLy4uL0Q6L0Zyb250LWVuZCBDb3Vyc2VzL1Byb2plY3RzL2N1cnJlbmN5LWNvbnZlcnRlci9zcmMvanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9zY3NzL3N0eWxlLnNjc3MiXSwibmFtZXMiOlsiQ0hGIiwiRVVSIiwiVVNEIiwiZ2V0Q3VycmVuY3kiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJqc29uIiwiZGF0YSIsImNyZWF0ZUFyciIsImNhdGNoIiwiZXJyIiwibWFwIiwiYXJyIiwicHVzaCIsInJhdGVzQ0hGIiwiZGF0ZSIsInJhdGUiLCJyYXRlc1VTRCIsInJhdGVzRVVSIiwibWluUmF0ZUNIRiIsIk1hdGgiLCJtaW4iLCJtYXhSYXRlQ0hGIiwibWF4IiwibWluUmF0ZUVVUiIsIm1heFJhdGVFVVIiLCJtaW5SYXRlVVNEIiwibWF4UmF0ZVVTRCIsImF2ZXJhZ2UiLCJyZWR1Y2UiLCJwIiwiYyIsImxlbmd0aCIsImF2VVNEIiwiYXZFVVIiLCJhdkNIRiIsImZpbmREYXlSYXRlIiwicmVzdWx0IiwiaSIsImRhdGVzTWluRVVSIiwiZGF0ZXNNaW5VU0QiLCJkYXRlc01pbkNIRiIsImRhdGVzTWF4RVVSIiwiZGF0ZXNNYXhVU0QiLCJkYXRlc01heENIRiIsImZpbmREYXlzV2l0aGluQXY1IiwiYXZlcmFnZVZhbCIsImN1cnJlbnRSYXRlIiwiZGF0ZXNBdlVTRCIsImRhdGVzQXZFVVIiLCJkYXRlc0F2Q0hGIiwiY2FsY0NvcnJlbGF0aW9uIiwiYXJyMSIsImFycjIiLCJhdmVyYWdlVmFsMSIsImF2ZXJhZ2VWYWwyIiwiY29ycmVsZXRpb24iLCJzdW0xIiwic3VtMiIsInN1bTMiLCJhcnJMZW5ndGgiLCJhIiwiYiIsInBvdyIsInNxcnQiLCJjb3JyVXNkRXVyIiwidG9GaXhlZCIsImNvcnJDaGZFdXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJzaG93RGF0ZXMiLCJhcnJEYXRlcyIsImN1cnJlbmN5IiwidmFsdWUiLCJzZWxlY3RlZEZpZWxkIiwiZWxTZWxlY3QiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJlbE9wdGlvbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3RDQTs7Ozs7Ozs7QUFFQSxLQUFJQSxNQUFNLEVBQVY7QUFBQSxLQUFjQyxNQUFNLEVBQXBCO0FBQUEsS0FBd0JDLE1BQU0sRUFBOUI7O0FBRUEsVUFBU0MsV0FBVCxHQUF1QjtBQUNyQkMsU0FBTSxzQkFBTixFQUNDQyxJQURELENBRUUsVUFBU0MsUUFBVCxFQUFtQjtBQUNqQixTQUFJQSxTQUFTQyxNQUFULEtBQW9CLEdBQXhCLEVBQTZCO0FBQzNCQyxlQUFRQyxHQUFSLGdFQUNJSCxTQUFTQyxNQURiO0FBRUQ7QUFDREQsY0FBU0ksSUFBVCxHQUFnQkwsSUFBaEIsQ0FDRSxVQUFTTSxJQUFULEVBQWU7QUFDYkMsaUJBQVVELElBQVY7QUFDSCxNQUhEO0FBSUQsSUFYSCxFQWFDRSxLQWJELENBYU8sVUFBU0MsR0FBVCxFQUFjO0FBQ25CTixhQUFRQyxHQUFSLENBQVksaUJBQVosRUFBK0JLLEdBQS9CO0FBQ0QsSUFmRDtBQWdCRDs7QUFFRFg7O0FBRUE7QUFDQSxVQUFTUyxTQUFULENBQW9CRCxJQUFwQixFQUEwQjtBQUN4QkEsUUFBS0ksR0FBTCxDQUFTLFVBQUNDLEdBQUQsRUFBUztBQUNoQixTQUFJQSxJQUFJLENBQUosQ0FBSixFQUFZO0FBQ1YsV0FBSUEsSUFBSSxDQUFKLEVBQU8sS0FBUCxDQUFK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QixLQUE5Qjs7QUFFQTtBQUNBd0IsWUFBU0MsYUFBVCxDQUF1QixlQUF2QixFQUF3Q0MsU0FBeEMsR0FBb0R0QixVQUFwRDtBQUNBb0IsWUFBU0MsYUFBVCxDQUF1QixlQUF2QixFQUF3Q0MsU0FBeEMsR0FBb0RyQixVQUFwRDtBQUNBbUIsWUFBU0MsYUFBVCxDQUF1QixlQUF2QixFQUF3Q0MsU0FBeEMsR0FBb0RwQixVQUFwRDs7QUFFQTtBQUNBa0IsWUFBU0MsYUFBVCxDQUF1QixlQUF2QixFQUF3Q0MsU0FBeEMsR0FBb0RMLFVBQXBEO0FBQ0FHLFlBQVNDLGFBQVQsQ0FBdUIsZUFBdkIsRUFBd0NDLFNBQXhDLEdBQW9ESCxVQUFwRDtBQUNELEU7Ozs7OztBQ3BNRCwwQyIsImZpbGUiOiJqcy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDg4ODM0NjY5ZTNmOWI4OTAyYzI3IiwiaW1wb3J0IHN0eWxlcyBmcm9tICcuLi9zY3NzL3N0eWxlLnNjc3MnO1xyXG5cclxubGV0IENIRiA9IFtdLCBFVVIgPSBbXSwgVVNEID0gW107XHJcblxyXG5mdW5jdGlvbiBnZXRDdXJyZW5jeSgpIHtcclxuICBmZXRjaCgnLi9qc29uL2N1cnJlbmN5Lmpzb24nKSAgXHJcbiAgLnRoZW4oXHJcbiAgICBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgTG9va3MgbGlrZSB0aGVyZSB3YXMgYSBwcm9ibGVtLiBTdGF0dXMgQ29kZTogIFxyXG4gICAgICAgICAgJHtyZXNwb25zZS5zdGF0dXN9YCk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oXHJcbiAgICAgICAgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgY3JlYXRlQXJyKGRhdGEpO1xyXG4gICAgICB9KTsgIFxyXG4gICAgfSAgXHJcbiAgKVxyXG4gIC5jYXRjaChmdW5jdGlvbihlcnIpIHsgIFxyXG4gICAgY29uc29sZS5sb2coJ0ZldGNoIEVycm9yIDotUycsIGVycik7ICBcclxuICB9KTtcclxufVxyXG5cclxuZ2V0Q3VycmVuY3koKTtcclxuXHJcbi8qY3JlYXRpbmcgYXJyYXlzIHdpdGggY3VycmVuY2llcyovXHJcbmZ1bmN0aW9uIGNyZWF0ZUFyciAoZGF0YSkge1xyXG4gIGRhdGEubWFwKChhcnIpID0+IHtcclxuICAgIGlmIChhcnJbMF0pIHtcclxuICAgICAgaWYgKGFyclswXVsnQ0hGJ10pIHtcclxuICAgICAgICBDSEYucHVzaChhcnJbMF1bJ0NIRiddKVxyXG4gICAgICB9IGVsc2UgaWYgKGFyclswXVsnVVNEJ10pIHtcclxuICAgICAgICBVU0QucHVzaChhcnJbMF1bJ1VTRCddKVxyXG4gICAgICB9IGVsc2UgaWYgKGFyclswXVsnRVVSJ10pIHtcclxuICAgICAgICBFVVIucHVzaChhcnJbMF1bJ0VVUiddKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYXJyWzFdKSB7XHJcbiAgICAgIGlmIChhcnJbMV1bJ0NIRiddKSB7XHJcbiAgICAgICAgQ0hGLnB1c2goYXJyWzFdWydDSEYnXSlcclxuICAgICAgfSBlbHNlIGlmIChhcnJbMV1bJ1VTRCddKSB7XHJcbiAgICAgICAgVVNELnB1c2goYXJyWzFdWydVU0QnXSlcclxuICAgICAgfSBlbHNlIGlmIChhcnJbMV1bJ0VVUiddKSB7XHJcbiAgICAgICAgRVVSLnB1c2goYXJyWzFdWydFVVInXSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGFyclsyXSkge1xyXG4gICAgICBpZiAoYXJyWzJdWydDSEYnXSkge1xyXG4gICAgICAgIENIRi5wdXNoKGFyclsyXVsnQ0hGJ10pXHJcbiAgICAgIH0gZWxzZSBpZiAoYXJyWzJdWydVU0QnXSkge1xyXG4gICAgICAgIFVTRC5wdXNoKGFyclsyXVsnVVNEJ10pXHJcbiAgICAgIH0gZWxzZSBpZiAoYXJyWzJdWydFVVInXSkge1xyXG4gICAgICAgIEVVUi5wdXNoKGFyclsyXVsnRVVSJ10pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KVxyXG5cclxuICAvKmNyZWF0aW5nIGFycmF5cyBvbmx5IHdpdGggcmF0ZXMqL1xyXG4gIGxldCByYXRlc0NIRiA9IENIRi5tYXAoKGRhdGUpID0+IHtcclxuICAgIHJldHVybiBkYXRlLnJhdGU7XHJcbiAgfSk7XHJcbiAgXHJcbiAgbGV0IHJhdGVzVVNEID0gVVNELm1hcCgoZGF0ZSkgPT4ge1xyXG4gICAgcmV0dXJuIGRhdGUucmF0ZTtcclxuICB9KTtcclxuXHJcbiAgbGV0IHJhdGVzRVVSID0gRVVSLm1hcCgoZGF0ZSkgPT4ge1xyXG4gICAgcmV0dXJuIGRhdGUucmF0ZTtcclxuICB9KTtcclxuXHJcbiAgLypjYWxjIG1pbi9tYXggZm9yIGN1cnJlbmNpZXMqL1xyXG4gIGNvbnN0IG1pblJhdGVDSEYgPSBNYXRoLm1pbiguLi5yYXRlc0NIRik7XHJcbiAgY29uc3QgbWF4UmF0ZUNIRiA9IE1hdGgubWF4KC4uLnJhdGVzQ0hGKTtcclxuXHJcbiAgY29uc3QgbWluUmF0ZUVVUiA9IE1hdGgubWluKC4uLnJhdGVzRVVSKTtcclxuICBjb25zdCBtYXhSYXRlRVVSID0gTWF0aC5tYXgoLi4ucmF0ZXNFVVIpO1xyXG5cclxuICBjb25zdCBtaW5SYXRlVVNEID0gTWF0aC5taW4oLi4ucmF0ZXNVU0QpO1xyXG4gIGNvbnN0IG1heFJhdGVVU0QgPSBNYXRoLm1heCguLi5yYXRlc1VTRCk7XHJcblxyXG4gIC8qY2FsYyBhdmVyYWdlKi9cclxuICBsZXQgYXZlcmFnZSA9IGFyciA9PiBhcnIucmVkdWNlKCAoIHAsIGMgKSA9PiBwICsgYywgMCApIC8gYXJyLmxlbmd0aDtcclxuXHJcbiAgbGV0IGF2VVNEID0gYXZlcmFnZSggWy4uLnJhdGVzVVNEXSApO1xyXG4gIGxldCBhdkVVUiA9IGF2ZXJhZ2UoIFsuLi5yYXRlc0VVUl0gKTtcclxuICBsZXQgYXZDSEYgPSBhdmVyYWdlKCBbLi4ucmF0ZXNDSEZdICk7XHJcblxyXG4gIC8qZmluZCBkYXRlKi9cclxuICBsZXQgZmluZERheVJhdGUgPSAoYXJyLCByYXRlKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gW11cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICBpZiAoYXJyW2ldWydyYXRlJ10gPT09IHJhdGUpIHJlc3VsdC5wdXNoKGFycltpXVsnZXhjaGFuZ2VkYXRlJ10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGxldCBkYXRlc01pbkVVUiA9IGZpbmREYXlSYXRlKEVVUiwgbWluUmF0ZUVVUik7XHJcbiAgbGV0IGRhdGVzTWluVVNEID0gZmluZERheVJhdGUoVVNELCBtaW5SYXRlVVNEKTtcclxuICBsZXQgZGF0ZXNNaW5DSEYgPSBmaW5kRGF5UmF0ZShDSEYsIG1pblJhdGVDSEYpO1xyXG5cclxuICBsZXQgZGF0ZXNNYXhFVVIgPSBmaW5kRGF5UmF0ZShFVVIsIG1heFJhdGVFVVIpO1xyXG4gIGxldCBkYXRlc01heFVTRCA9IGZpbmREYXlSYXRlKFVTRCwgbWF4UmF0ZVVTRCk7XHJcbiAgbGV0IGRhdGVzTWF4Q0hGID0gZmluZERheVJhdGUoQ0hGLCBtYXhSYXRlQ0hGKTtcclxuXHJcbiAgLyogRmluZCBkYXRlcyB3aGVuIGV4Y2hhbmdlIHJhdGUgd2FzIHdpdGhpbiA1JSBvbiB0aGUgYXZlcmFnZSBleGNoYW5nZSByYXRlICovXHJcbiAgbGV0IGZpbmREYXlzV2l0aGluQXY1ID0gKGFyciwgYXZlcmFnZVZhbCkgPT4ge1xyXG4gICAgY29uc3QgbWluID0gYXZlcmFnZVZhbCAtIChhdmVyYWdlVmFsICogMi41IC8gMTAwKTtcclxuICAgIGNvbnN0IG1heCA9IGF2ZXJhZ2VWYWwgKyAoYXZlcmFnZVZhbCAqIDIuNSAvIDEwMCk7XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGgtMTsgaSsrKSB7XHJcbiAgICAgIGxldCBjdXJyZW50UmF0ZSA9IGFycltpXVsncmF0ZSddO1xyXG4gICAgICBpZiAobWF4ID4gY3VycmVudFJhdGUgJiYgY3VycmVudFJhdGUgPiBtaW4pIHJlc3VsdC5wdXNoKGFycltpXVsnZXhjaGFuZ2VkYXRlJ10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBsZXQgZGF0ZXNBdlVTRCA9IGZpbmREYXlzV2l0aGluQXY1KFVTRCwgYXZVU0QpLFxyXG4gICAgZGF0ZXNBdkVVUiA9IGZpbmREYXlzV2l0aGluQXY1KEVVUiwgYXZFVVIpLFxyXG4gICAgZGF0ZXNBdkNIRiA9IGZpbmREYXlzV2l0aGluQXY1KENIRiwgYXZDSEYpO1xyXG5cclxuICAvKiBDYWxjIGNvcnJlbGF0aW9uIGZyb20gMTk5OS0wMS0wMSB1bnRpbCB0b2RheSAqL1xyXG4gIC8qIEJldHdlZW4gVVNEL0VVUiAqL1xyXG5cclxuICBsZXQgY2FsY0NvcnJlbGF0aW9uID0gKGFycjEsIGFycjIsIGF2ZXJhZ2VWYWwxLCBhdmVyYWdlVmFsMikgPT4ge1xyXG4gICAgbGV0IGNvcnJlbGV0aW9uO1xyXG4gICAgbGV0IHN1bTEgPSAwLCBzdW0yID0gMCwgc3VtMyA9IDA7XHJcbiAgICBsZXQgYXJyTGVuZ3RoID0gYXJyMS5sZW5ndGggPiBhcnIyLmxlbmd0aCA/IGFycjIubGVuZ3RoIC0gMSA6IGFycjEubGVuZ3RoIC0gMTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IGEgPSBhcnIxW2ldWydyYXRlJ10gLSBhdmVyYWdlVmFsMTtcclxuICAgICAgbGV0IGIgPSBhcnIyW2ldWydyYXRlJ10gLSBhdmVyYWdlVmFsMjtcclxuICAgICAgc3VtMSArPSBhICogYjtcclxuICAgICAgc3VtMiArPSBNYXRoLnBvdyhhLCAyKTtcclxuICAgICAgc3VtMyArPSBNYXRoLnBvdyhiLCAyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdW0xIC8gTWF0aC5zcXJ0KHN1bTIgKiBzdW0zKTtcclxuICB9XHJcblxyXG4gIGxldCBjb3JyVXNkRXVyID0gKGNhbGNDb3JyZWxhdGlvbihVU0QsIEVVUiwgYXZVU0QsIGF2RVVSKSkudG9GaXhlZCg0KTtcclxuXHJcbiAgLyogQmV0d2VlbiBDSEYvRVVSICovXHJcbiAgbGV0IGNvcnJDaGZFdXIgPSAoY2FsY0NvcnJlbGF0aW9uKENIRiwgRVVSLCBhdkNIRiwgYXZFVVIpKS50b0ZpeGVkKDQpO1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgKioqXHJcbiAgKioqIERpc3BsYXkgZGF0YVxyXG4gICoqKlxyXG4gICoqL1xyXG5cclxuICAvKm1pbi9tYXgqL1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtaW4tY2hmJykuaW5uZXJIVE1MID0gbWluUmF0ZUNIRi50b0ZpeGVkKDIpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXgtY2hmJykuaW5uZXJIVE1MID0gbWF4UmF0ZUNIRi50b0ZpeGVkKDIpO1xyXG5cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWluLWV1cicpLmlubmVySFRNTCA9IG1pblJhdGVFVVIudG9GaXhlZCgyKTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWF4LWV1cicpLmlubmVySFRNTCA9IG1heFJhdGVFVVIudG9GaXhlZCgyKTtcclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21pbi11c2QnKS5pbm5lckhUTUwgPSBtaW5SYXRlVVNELnRvRml4ZWQoMik7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21heC11c2QnKS5pbm5lckhUTUwgPSBtYXhSYXRlVVNELnRvRml4ZWQoMik7XHJcblxyXG4gIC8qYXZlcmFnZSovXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2F2ZXJhZ2UtdXNkJykuaW5uZXJIVE1MID0gYXZVU0QudG9GaXhlZCgyKTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXZlcmFnZS1ldXInKS5pbm5lckhUTUwgPSBhdkVVUi50b0ZpeGVkKDIpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhdmVyYWdlLWNoZicpLmlubmVySFRNTCA9IGF2Q0hGLnRvRml4ZWQoMik7XHJcblxyXG4gIC8qV2hlbiBkYXRlcyBvY2N1ciovXHJcbiAgZnVuY3Rpb24gc2hvd0RhdGVzKGFyckRhdGVzLCBjdXJyZW5jeSwgdmFsdWUpIHtcclxuICAgIGlmIChhcnJEYXRlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIGxldCBzZWxlY3RlZEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dmFsdWV9LWRhdGUtJHtjdXJyZW5jeX1gKTtcclxuICAgICAgbGV0IGVsU2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgIHNlbGVjdGVkRmllbGQuYXBwZW5kQ2hpbGQoZWxTZWxlY3QpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyckRhdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGVsT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgZWxPcHRpb24uaW5uZXJIVE1MID0gYXJyRGF0ZXNbaV07XHJcbiAgICAgICAgZWxTZWxlY3QuYXBwZW5kQ2hpbGQoZWxPcHRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHt2YWx1ZX0tZGF0ZS0ke2N1cnJlbmN5fWApLmlubmVySFRNTCA9IGFyckRhdGVzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2hvd0RhdGVzKGRhdGVzTWluRVVSLCAnRVVSJywgJ21pbicpO1xyXG4gIHNob3dEYXRlcyhkYXRlc01pblVTRCwgJ1VTRCcsICdtaW4nKTtcclxuICBzaG93RGF0ZXMoZGF0ZXNNaW5DSEYsICdDSEYnLCAnbWluJyk7XHJcblxyXG4gIHNob3dEYXRlcyhkYXRlc01heEVVUiwgJ0VVUicsICdtYXgnKTtcclxuICBzaG93RGF0ZXMoZGF0ZXNNYXhVU0QsICdVU0QnLCAnbWF4Jyk7XHJcbiAgc2hvd0RhdGVzKGRhdGVzTWF4Q0hGLCAnQ0hGJywgJ21heCcpO1xyXG5cclxuICAvKiBEYXRlcyB3aGl0aGluIGF2ZXJhZ2UgKi9cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGF0ZXMtYXYtVVNEJykuaW5uZXJIVE1MID0gZGF0ZXNBdlVTRDtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGF0ZXMtYXYtRVVSJykuaW5uZXJIVE1MID0gZGF0ZXNBdkVVUjtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGF0ZXMtYXYtQ0hGJykuaW5uZXJIVE1MID0gZGF0ZXNBdkNIRjtcclxuXHJcbiAgLyogQ29ycmVsYXRpb24gKi9cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29yci11c2QtZXVyJykuaW5uZXJIVE1MID0gY29yclVzZEV1cjtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29yci1jaGYtZXVyJykuaW5uZXJIVE1MID0gY29yckNoZkV1cjtcclxufVxyXG5cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9EOi9Gcm9udC1lbmQgQ291cnNlcy9Qcm9qZWN0cy9jdXJyZW5jeS1jb252ZXJ0ZXIvc3JjL2pzL21haW4uanMiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc2Nzcy9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=