/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _style = __webpack_require__(1);
	
	var _style2 = _interopRequireDefault(_style);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var CHF = [],
	    EUR = [],
	    USD = [];
	
	/* Get data */
	function getCurrency() {
	  fetch('./json/currency.json').then(function (response) {
	    if (response.status !== 200) {
	      console.log('Looks like there was a problem. Status Code:  \n          ' + response.status);
	    }
	    response.json().then(function (data) {
	      callback(data);
	    });
	  }).catch(function (err) {
	    console.log('Fetch Error :-S', err);
	  });
	}
	
	getCurrency();
	
	/* Ð¡reating arrays with currencies */
	function callback(data) {
	  data.map(function (arr) {
	    if (arr[0]) {
	      if (arr[0]['CHF']) {
	        CHF.push(arr[0]['CHF']);
	      } else if (arr[0]['USD']) {
	        USD.push(arr[0]['USD']);
	      } else if (arr[0]['EUR']) {
	        EUR.push(arr[0]['EUR']);
	      }
	    }
	    if (arr[1]) {
	      if (arr[1]['CHF']) {
	        CHF.push(arr[1]['CHF']);
	      } else if (arr[1]['USD']) {
	        USD.push(arr[1]['USD']);
	      } else if (arr[1]['EUR']) {
	        EUR.push(arr[1]['EUR']);
	      }
	    }
	    if (arr[2]) {
	      if (arr[2]['CHF']) {
	        CHF.push(arr[2]['CHF']);
	      } else if (arr[2]['USD']) {
	        USD.push(arr[2]['USD']);
	      } else if (arr[2]['EUR']) {
	        EUR.push(arr[2]['EUR']);
	      }
	    }
	  });
	
	  /* Creating arrays only with rates */
	  var ratesCHF = CHF.map(function (date) {
	    return date.rate;
	  });
	
	  var ratesUSD = USD.map(function (date) {
	    return date.rate;
	  });
	
	  var ratesEUR = EUR.map(function (date) {
	    return date.rate;
	  });
	
	  /* Calc min/max for currencies */
	  var minRateCHF = Math.min.apply(Math, _toConsumableArray(ratesCHF));
	  var maxRateCHF = Math.max.apply(Math, _toConsumableArray(ratesCHF));
	
	  var minRateEUR = Math.min.apply(Math, _toConsumableArray(ratesEUR));
	  var maxRateEUR = Math.max.apply(Math, _toConsumableArray(ratesEUR));
	
	  var minRateUSD = Math.min.apply(Math, _toConsumableArray(ratesUSD));
	  var maxRateUSD = Math.max.apply(Math, _toConsumableArray(ratesUSD));
	
	  /* Calc average */
	  var average = function average(arr) {
	    return arr.reduce(function (p, c) {
	      return p + c;
	    }, 0) / arr.length;
	  };
	
	  var avUSD = average([].concat(_toConsumableArray(ratesUSD)));
	  var avEUR = average([].concat(_toConsumableArray(ratesEUR)));
	  var avCHF = average([].concat(_toConsumableArray(ratesCHF)));
	
	  /* Find date */
	  var findDayRate = function findDayRate(arr, rate) {
	    var result = [];
	    for (var i = 0; i < arr.length - 1; i++) {
	      if (arr[i]['rate'] === rate) result.push(arr[i]['exchangedate']);
	    }
	    return result;
	  };
	
	  var datesMinEUR = findDayRate(EUR, minRateEUR);
	  var datesMinUSD = findDayRate(USD, minRateUSD);
	  var datesMinCHF = findDayRate(CHF, minRateCHF);
	
	  var datesMaxEUR = findDayRate(EUR, maxRateEUR);
	  var datesMaxUSD = findDayRate(USD, maxRateUSD);
	  var datesMaxCHF = findDayRate(CHF, maxRateCHF);
	
	  /* Find dates when exchange rate was within 5% on the average exchange rate */
	  var findDaysWithinAv5 = function findDaysWithinAv5(arr, averageVal) {
	    var min = averageVal - averageVal * 2.5 / 100;
	    var max = averageVal + averageVal * 2.5 / 100;
	    var result = [];
	    for (var i = 0; i < arr.length - 1; i++) {
	      var currentRate = arr[i]['rate'];
	      if (max > currentRate && currentRate > min) result.push(arr[i]['exchangedate']);
	    }
	    return result.length;
	  };
	
	  var datesAvUSD = findDaysWithinAv5(USD, avUSD),
	      datesAvEUR = findDaysWithinAv5(EUR, avEUR),
	      datesAvCHF = findDaysWithinAv5(CHF, avCHF);
	
	  /* Calc correlation from 1999-01-01 until today */
	
	  var calcCorrelation = function calcCorrelation(arr1, arr2, averageVal1, averageVal2) {
	    var a = 0,
	        b = 0,
	        c = 0;
	    var arrLength = arr1.length > arr2.length ? arr2.length - 1 : arr1.length - 1;
	    for (var i = 0; i < arrLength; i++) {
	      var rate1 = arr1[i]['rate'] - averageVal1;
	      var rate2 = arr2[i]['rate'] - averageVal2;
	      a += rate1 * rate2;
	      b += Math.pow(rate1, 2);
	      c += Math.pow(rate2, 2);
	    }
	    var correletion = a / Math.sqrt(b * c);
	    return correletion;
	  };
	
	  /* Between USD/EUR */
	  var corrUsdEur = calcCorrelation(USD, EUR, avUSD, avEUR).toFixed(6);
	
	  /* Between CHF/EUR */
	  var corrChfEur = calcCorrelation(CHF, EUR, avCHF, avEUR).toFixed(6);
	
	  /**
	  ***
	  *** Display data
	  ***
	  **/
	
	  /* min/max */
	  document.querySelector('#min-chf').innerHTML = minRateCHF.toFixed(2);
	  document.querySelector('#max-chf').innerHTML = maxRateCHF.toFixed(2);
	
	  document.querySelector('#min-eur').innerHTML = minRateEUR.toFixed(2);
	  document.querySelector('#max-eur').innerHTML = maxRateEUR.toFixed(2);
	
	  document.querySelector('#min-usd').innerHTML = minRateUSD.toFixed(2);
	  document.querySelector('#max-usd').innerHTML = maxRateUSD.toFixed(2);
	
	  /*average*/
	  document.querySelector('#average-usd').innerHTML = avUSD.toFixed(2);
	  document.querySelector('#average-eur').innerHTML = avEUR.toFixed(2);
	  document.querySelector('#average-chf').innerHTML = avCHF.toFixed(2);
	
	  /* When dates occur */
	  function showDates(arrDates, currency, value) {
	    if (arrDates.length > 1) {
	      var selectedField = document.querySelector('#' + value + '-date-' + currency);
	      var elSelect = document.createElement('select');
	      selectedField.appendChild(elSelect);
	      for (var i = 0; i < arrDates.length; i++) {
	        var elOption = document.createElement('option');
	        elOption.innerHTML = arrDates[i];
	        elSelect.appendChild(elOption);
	      }
	    } else {
	      document.querySelector('#' + value + '-date-' + currency).innerHTML = arrDates;
	    }
	  }
	
	  showDates(datesMinEUR, 'EUR', 'min');
	  showDates(datesMinUSD, 'USD', 'min');
	  showDates(datesMinCHF, 'CHF', 'min');
	
	  showDates(datesMaxEUR, 'EUR', 'max');
	  showDates(datesMaxUSD, 'USD', 'max');
	  showDates(datesMaxCHF, 'CHF', 'max');
	
	  /* Dates whithin average */
	  document.querySelector('#dates-av-USD').innerHTML = datesAvUSD;
	  document.querySelector('#dates-av-EUR').innerHTML = datesAvEUR;
	  document.querySelector('#dates-av-CHF').innerHTML = datesAvCHF;
	
	  /* Correlation */
	  document.querySelector('#corr-usd-eur').innerHTML = corrUsdEur;
	  document.querySelector('#corr-chf-eur').innerHTML = corrChfEur;
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,